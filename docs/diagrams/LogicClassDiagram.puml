@startuml
!include style.puml
skinparam arrowThickness 1.1
skinparam arrowColor LOGIC_COLOR_T4
skinparam classBackgroundColor LOGIC_COLOR

package Logic {
    package Parser {
        Interface Parser <<Interface>>
        Class ParserManager
        Class XYZCommandParser
        Class CliSyntax
        Class ParserUtil
        Class ArgumentMultimap
        Class ArgumentTokenizer
        Class Prefix
    }

    package Command {
        Class XYZCommand
        Class CommandResult
        Class "{abstract}\nCommand" as Command
    }

    Interface Logic <<Interface>>
    Interface SessionLogic <<Interface>>
    Interface ExerciseLogic <<Interface>>
    Interface ScheduleLogic <<Interface>>
    Interface WorkoutLogic <<Interface>>
    Interface StatisticsLogic <<Interface>>

    Class LogicManager
}

package Model{
    Class HiddenModel #FFFFFF
}

Class HiddenOutside #FFFFFF
HiddenOutside .left.> Logic

' Logic
Logic -up-|> SessionLogic
Logic -up-|> ExerciseLogic
Logic -up-|> ScheduleLogic
Logic -up-|> WorkoutLogic
Logic -up-|> StatisticsLogic

Logic ..> CommandResult
LogicManager .up.|> Logic
LogicManager -->"1" ParserManager
LogicManager .right.> CommandResult
LogicManager --> Model
Command .right.> Model

' Command
XYZCommand -up-|> Command
Command .up.> CommandResult
note bottom of XYZCommand: XYZCommand = AddCommand, \nFindCommand, etc

' Parser
ParserManager .up.|> Parser
XYZCommandParser .up.|> Parser
ParserManager ..> XYZCommandParser : creates >
XYZCommandParser ..> ArgumentMultimap
XYZCommandParser ..> ArgumentTokenizer
ArgumentTokenizer .left.> ArgumentMultimap
XYZCommandParser ..> CliSyntax
XYZCommandParser ..> ParserUtil
ParserUtil .down.> Prefix
ArgumentTokenizer .down.> Prefix
CliSyntax ..> Prefix

' Parser x Command
ParserManager ..> XYZCommand : returns >
XYZCommandParser .right.> XYZCommand : creates >

@enduml
